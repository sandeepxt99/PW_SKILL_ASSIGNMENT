// Ques -2 : 
/* 
Given an array nums of n integers, return an array of all the unique quadruplets
[nums[a], nums[b], nums[c], nums[d]] such that:
           ● 0 <= a, b, c, d < n
           ● a, b, c, and d are distinct.
           ● nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.*/




vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n= nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans; 
        if(n<4)return ans; 
        for(int i=0;i<n;i++){
           // if(i>0 and nums[i]==nums[i-1])continue;
             while(i>0 and i<n and nums[i]==nums[i-1])i++;
            for(int j=i+1;j<n;j++){
                int k = j+1, l = n-1; 
                while(k<l){
                    long long sum = nums[i]+nums[j];
                    sum+=nums[k];
                    sum+=nums[l];
                    if(sum>target)l--;
                    else if(sum<target)k++;
                    else {
                        ans.push_back({nums[i],nums[j],nums[k],nums[l]});
                        k++, l--; 
                        while(k<l and nums[k]==nums[k-1])k++; 
                        while(k<l and nums[l]==nums[l+1])l--; 
                    }
                }
                while( j< n-1 and nums[j]==nums[j+1])j++;
            }
          
        }
        return ans; 
    }
